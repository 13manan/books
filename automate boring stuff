# -*- coding: utf-8 -*-
'''
Ending a program early with sys.exit()
'''
	
import sys

while True:
	print('Type exit to exit')
	response = input()
	if response == 'exit':
		sys.exit()
	print('You typed' + 'response' + '.')


'''
dicts
'''

#The keys(), values(), and items() Methods
spam = {'color': 'red', 'age': 42}
for v in spam.values():
    print(v)
red
42

for k in spam.keys():
    print(k)
color
age

for i in spam.items():
    print(i)
('color', 'red')
('age', 42)

 list(spam.keys())
['color', 'age']

for k, v in spam.items():
        print('Key: ' + k + ' Value: ' + str(v))
Key: age Value: 42
Key: color Value: red

#The get() Method
#There is no 'eggs' key in the picnicItems dictionary, the default value 0 is returned by the get() method.
picnicItems = {'apples': 5, 'cups': 2}
'I am bringing ' + str(picnicItems.get('cups', 0)) + ' cups.'
'I am bringing 2 cups.'
'I am bringing ' + str(picnicItems.get('eggs', 0)) + ' eggs.'
'I am bringing 0 eggs.'

#The setdefault() Method
#The first argument passed to the method is the key to check for, 
#and the second argument is the value to set at that key if the key does not exist. 
#If the key does exist, the setdefault() method returns the keyâ€™s value. 
spam = {'name': 'Pooka', 'age': 5}
spam.setdefault('color', 'black')
{'color': 'black', 'age': 5, 'name': 'Pooka'}
spam.setdefault('color', 'white')
{'color': 'black', 'age': 5, 'name': 'Pooka'}

#Pretty Printing
#Automatic dicts contents formating
import pprint
message = 'It was a bright cold day in April, and the clocks were striking
thirteen.'
count = {}

for character in message:
    count.setdefault(character, 0)
    count[character] = count[character] + 1

pprint.pprint(count)

#Nested Dictionaries and Lists




'''
List and tuple ops
'''

#Finding a Value in a List with the index() Method
spam = ['hello', 'hi', 'howdy', 'heyas']
spam.index('hello')

#Adding Values to Lists with the append() and insert() Methods
spam = ['cat', 'dog', 'bat']
spam.append('moose')
['cat', 'dog', 'bat', 'moose']

spam = ['cat', 'dog', 'bat']
spam.insert(1, 'chicken')
['cat', 'chicken', 'dog', 'bat']

#Removing Values from Lists with remove()
spam = ['cat', 'bat', 'rat', 'elephant']
spam.remove('bat')
['cat', 'rat', 'elephant']

#Sorting the Values in a List with the sort() Method
spam = [2, 5, 3.14, 1, -7]
spam.sort()
[-7, 1, 2, 3.14, 5]

spam = ['ants', 'cats', 'dogs', 'badgers', 'elephants']
spam.sort()
['ants', 'badgers', 'cats', 'dogs', 'elephants']

spam.sort(reverse=True)
['elephants', 'dogs', 'cats', 'badgers', 'ants']

spam = ['a', 'z', 'A', 'Z']
spam.sort(key=str.lower)
['a', 'A', 'z', 'Z']

#References
import copy
#copy.copy() and copy.deepcopy() helps in making copy of lists,
#direct assignment of lists assign the reference of the src list



'''
Error Handling
'''

#difference of placing try except block
def spam(divideBy):
	try:
		return 42 / divideBy
	except	ZeroDivisionError:
		print('Error: Invalid argument.')
		
print(spam(2))
print(spam(12))
print(spam(0))
print(spam(1))

21.0
3.5
Error: Invalid argument.
None
42.0
		
def spam(divideBy):
    return 42 / divideBy

try:
    print(spam(2))
    print(spam(12))
    print(spam(0))
    print(spam(1))
except ZeroDivisionError:
    print('Error: Invalid argument.')
	
21.0
3.5
Error: Invalid argument.
